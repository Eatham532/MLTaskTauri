"""
This code was generated by AI for simplicity
"""

class Result:
    """
    A Pythonic replication of Rust's `Result` enum for error handling.
    Represents either a successful value (Ok) or an error (Err).
    """

    def __init__(self, ok=None, err=None):
        if (ok is not None and err is not None) or \
           (ok is None and err is None):
            raise ValueError("Result must be either Ok or Err, but not both or neither.")
        self._ok = ok
        self._err = err

    def is_ok(self):
        """Returns True if the result is Ok."""
        return self._ok is not None

    def is_err(self):
        """Returns True if the result is Err."""
        return self._err is not None

    def unwrap(self):
        """
        Returns the contained Ok value.
        Raises an exception if the value is an Err.
        """
        if self.is_ok():
            return self._ok
        else:
            raise RuntimeError(f"Called `unwrap()` on an `Err` value: {self._err}")

    def unwrap_err(self):
        """
        Returns the contained Err value.
        Raises an exception if the value is an Ok.
        """
        if self.is_err():
            return self._err
        else:
            raise RuntimeError(f"Called `unwrap_err()` on an `Ok` value: {self._ok}")

    def unwrap_or(self, default):
        """
        Returns the contained Ok value or a provided default.
        """
        if self.is_ok():
            return self._ok
        else:
            return default

    def map(self, func):
        """
        Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained `Ok` value.
        """
        if self.is_ok():
            return Ok(func(self._ok))
        else:
            return Err(self._err)

    def map_err(self, func):
        """
        Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained `Err` value.
        """
        if self.is_err():
            return Err(func(self._err))
        else:
            return Ok(self._ok)

    def and_then(self, func):
        """
        Calls `func` if the result is `Ok`, otherwise returns the `Err` value.
        This is a common way to chain fallible operations.
        """
        if self.is_ok():
            return func(self._ok)
        else:
            return Err(self._err)

    def or_else(self, func):
        """
        Calls `func` if the result is `Err`, otherwise returns the `Ok` value.
        This is a common way to provide a fallback for fallible operations.
        """
        if self.is_err():
            return func(self._err)
        else:
            return Ok(self._ok)

    def __repr__(self):
        if self.is_ok():
            return f"Ok({repr(self._ok)})"
        else:
            return f"Err({repr(self._err)})"

    def __eq__(self, other):
        if not isinstance(other, Result):
            return NotImplemented
        return self._ok == other._ok and self._err == other._err

def Ok(value=()):
    """Convenience function to create an Ok Result."""
    return Result(ok=value)

def Err(error):
    """Convenience function to create an Err Result."""
    return Result(err=error)